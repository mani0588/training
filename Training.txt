Selenium overview / architecture
	Java code -> driver server -> Browser
		Whatever the code you run that will try to communicate or control your application in browser
		But browser could not understand the script
		So the code will be passed via driver server which can understand the script instructions and interact with your application

	What is Driver server?
		Driver server is nothing but an exe file which is developed by the respective browser
		Chrome -> ChromeDriverServer.exe
		Firefox -> GeckoDriverServer.exe
		IE -> IEDriverServer.exe


		
		
Methods and its usage
	Driver methods:
		get
		close
		quit
		findElement
		findElements
		getCurrentUrl
		getPageSource
		getTitle
		getWindowHandle
		getWindowHandles

	Webelement methods:
		click
		clear
		sendKeys
		getText
		getAttribute

	Drop-down methods:
		selectByValue
		selectByVisibleText
		selectByIndex
		deselectByValue
		deselectByVisibleText
		deselectByIndex
		getOptions
		getFirstSelectedOption
		getAllSelectedOptions

	Boolean methods:
		isDisplayed
		isElabled
		isSelected

	Navigation methods:
		driver.navigate().to("https://www.softwaretestinghelp.com");
		driver.navigate().back();
		driver.navigate().forward();

	Alert methods:
		accept
		dismiss
		sendKeys
		getText

	Actions methods:
		moveToElement
		dragAndDrop
		click
		doubleClick
		contextClick
		build
		perform
		
	Switch-to methods:
		driver.switchTo().frame
		driver.switchTo().window
		driver.switchTo().alert

	Waits methods:  (this is not a full syntax)
		implicitlyWait
		ExplicitWait
		Fluent waits

	Others:
		pageLoadTimeout



Xpath:
	XPATH locator - //tagname[@attName='attVal']
	top-down search
		/ - child only - //html/head/meta
		// - child and grand-child - //html//meta
	
	bottom-top
		parent - parent only - //input[@id='subject']/parent::td
		ancestor - parent and grand-parent - //input[@id='subject']/ancestor::div
	
	search in same level
		preceding-sibling - element present above but under same parent
		//a[.='11']/parent::td/preceding-sibling::td
		
		following-sibling - element present below but under same parent
		//a[.='11']/parent::td/following-sibling::td
	
	text() or . - locate element based on visible text
		a[text()='Basic Contact Form']
		a[.='Basic Contact Form']
	
	@ - stands for attribute
		//input[@id='value_of_id']

	Partial match:
		starts-with() - locate element by partial matching at beginning
		//a[starts-with(.,'Basic Contact ')]
		
		contains() - locate element by partial matching
		//a[contains(.,'sic Contact ')]

	Multiple attributes:
		and - identify element when both attribute matches
		//input[@type='checkbox' and @name='email_to[]']
		
		or - identify element when either of attribute match
		//input[@type='checkbox' or @name='email_to[]']
		
	Others:
		not - not matching elements (similar to !=)
		//a[not(contains(text(),'Form'))]
		
		| - locate using more than one xpath
		//input[@type='radio'] | //select
		
		* - locate element when tagname is dynamic
		//*[@id]
		
		= != > < >= <= - Comparison operator
	
	Select the specific element
		//input[@type='checkbox'][3]
		(//input[@type='checkbox'])[position()=3]
		
		[last()] - select the last element
			(//input[@type='checkbox'])[last()]
			(//input[@type='checkbox'])[last()-1]
			
			
Syntax for frames / windows / alerts / waits / screenshots
	Frames
		driver.switchTo().frame("iframeResult");
	Windows
		String secondID = driver.getWindowHandles().toArray()[1].toString();
		driver.switchTo().window(secondID);
	Alert
		driver.switchTo().alert().getText();
		driver.switchTo().alert().accept();
	Waits
		Implicit wait:
			driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
		ExplicitWait:
			WebDriverWait wait = new WebDriverWait(driver, 60);
			wait.until(ExpectedConditions.alertIsPresent());
		FluentWait:
			will add later
	Screenshots
		/ Default screenshots
		File screen = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		FileHandler.copy(screen, new File("./src/test/resources/Mycontactform.png"));

		// Custom screenshots
		Shutterbug.shootPage(driver, ScrollStrategy.BOTH_DIRECTIONS, 300)
				.highlightWithText(driver.findElement(By.id("twotabsearchtextbox")), "Highlight search box")
				.withName("My contact form - Home Page").save();
	
	
TestNG
	Overview and purpose
		It's a automation framework
		which help us to generates the reports based on the assertions
		
	Annotations
		It's a reserved keyword or annotated interface
		Starts with @ symbol
		This controls the order of the execution
		and controls the repeated tests
		
		@BeforeSuite - Once per <suite> tag + at beginning of the execution
			@BeforeTest - Once per <test> tag
				@BeforeClass - Once per <class> tag + at beginning of the class
					@BeforeMethod - Once per @Test annotation + at beginning of the @Test
						@Test - Once per declaration
					@AfterMethos - Once per @Test annotation + at beginning of the @Test
				@AfterClass - Once per <class> tag + at end of the class
			@AfterTest - Once per <test> tag
		@AfterSuite - Once per <suite> tag + at end of the execution
		
		Other annotations:
			@DataProvider
			@Factory
			
	Assertions
		Assertion is a kind of verification and based on the status it update the test results
		Two type of asserts
			Soft Assert - Continue to next step even if the assert fails
			Hard Assert - Stop and fail the test when assert fails (this will not go to next step)
			
	XML suites
		<?xml version="1.0" encoding="UTF-8"?>
			<suite name="Mycontact Form" verbose="1"> ============> @BeforeSuite
				<test name="Regression Test with chrome"> ============> @BeforeTest
					<classes>
						<class name="testngPack.CommonAnnotations" /> ============> @BeforeClass and the @AfterClass
						<class name="testngPack.Scenario1" /> ============> @BeforeClass and the @AfterClass
						<class name="testngPack.Scenario2" /> ============> @BeforeClass and the @AfterClass
					</classes>
				</test> ============> @AfterTest
				<test name="Regression Test with firefox"> ============> @BeforeTest
					<classes>
						<class name="testngPack.CommonAnnotations" /> ============> @BeforeClass and the @AfterClass
						<class name="testngPack.Scenario1" /> ============> @BeforeClass and the @AfterClass
						<class name="testngPack.Scenario2" /> ============> @BeforeClass and the @AfterClass
					</classes>
				</test> ============> @AfterTest
			</suite> ============> @AfterSuite
			
			Note:
				<class name="testngPack.CommonAnnotations" />
				This <class> tag represents actually a Java Class file
				The Java class file will have many @Test
				So the inside the <class> tag, the order of the execution will be like below
					@BeforeMethod
						@Test ====== Test 1
					@AfterMethos
					@BeforeMethod
						@Test ====== Test 2
					@AfterMethos
					
				So the @BeforeMethod and @AfterMethos will run repeatedly for each @Test
			
			
	Reports
		TestNG will give us two type of reports
			Console report
			Html report
			
	DataProvider
		@DataProvider will run the same @Test repeatedly with different data
		This is called data driven test
